;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname |space-invaders-starter (1)|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/universe)
(require 2htdp/image)

;; Space Invaders



;; Constants:

(define WIDTH  300)
(define HEIGHT 500)

(define INVADER-X-SPEED 1.5)  ;speeds (not velocities) in pixels per tick
(define INVADER-Y-SPEED 1.5)
(define TANK-SPEED 2)
(define MISSILE-SPEED 10)

(define HIT-RANGE 10)

(define INVADE-RATE 100)

(define BACKGROUND (empty-scene WIDTH HEIGHT))

(define INVADER
  (overlay/xy (ellipse 10 15 "outline" "blue")              ;cockpit cover
              -5 6
              (ellipse 20 10 "solid"   "blue")))            ;saucer

(define TANK
  (overlay/xy (overlay (ellipse 28 8 "solid" "black")       ;tread center
                       (ellipse 30 10 "solid" "green"))     ;tread outline
              5 -14
              (above (rectangle 5 10 "solid" "black")       ;gun
                     (rectangle 20 10 "solid" "black"))))   ;main body

(define TANK-HEIGHT/2 (/ (image-height TANK) 2))

(define MISSILE (ellipse 5 15 "solid" "red"))



;; Data Definitions:

(define-struct game (invaders missiles t))
;; Game is (make-game  (listof Invader) (listof Missile) Tank)
;; interp. the current state of a space invaders game
;;         with the current invaders, missiles and tank position

;; Game constants defined below Missile data definition

#;
(define (fn-for-game s)
  (... (fn-for-loinvader (game-invaders s))
       (fn-for-lom (game-missiles s))
       (fn-for-tank (game-tank s))))



(define-struct tank (x dir))
;; Tank is (make-tank Number Integer[-1, 1])
;; interp. the tank location is x, HEIGHT - TANK-HEIGHT in screen coordinates
;;         the tank moves TANK-SPEED pixels per clock tick left if dir -1, right if dir 1

(define T0 (make-tank (/ WIDTH 2) 0))   ;center going nowhere
(define T1 (make-tank 50 1))            ;going right
(define T1.1 (make-tank (+ 50 TANK-SPEED) 1))
(define T2 (make-tank 50 -1))           ;going left
(define T2.1 (make-tank (- 50 TANK-SPEED) -1))
(define T3 (make-tank 2 -1))
(define T3.1 (make-tank 0 -1))
(define T4 (make-tank 300 1))

#;
(define (fn-for-tank t)
  (... (tank-x t) (tank-dx t)))



(define-struct invader (x y dx))
;; Invader is (make-invader Number Number Number)
;; interp. the invader is at (x, y) in screen coordinates
;;         the invader along x by dx pixels per clock tick

(define I1 (make-invader 150 100 12))           ;not landed, moving right
(define I1.1 (make-invader (+ 150 INVADER-X-SPEED) (+ 100 INVADER-Y-SPEED) 12))
(define I2 (make-invader 150 HEIGHT -10))       ;exactly landed, moving left
(define I3 (make-invader 150 (+ HEIGHT 10) 10)) ;> landed, moving right
(define I4 (make-invader 200 400 -10))
(define I4.1 (make-invader (- 200 INVADER-X-SPEED) (+ 400 INVADER-Y-SPEED) -10))
(define I5 (make-invader 299 300 10))
(define I5.1 (make-invader 299 300 -10))
(define I6 (make-invader 298.5 100 10))
(define I6.1 (make-invader 300 101.5 10))
(define I7 (make-invader 1 300 -10))
(define I7.1 (make-invader 1 300 10))
(define I8 (make-invader 0 100 -10))
(define I8.1 (make-invader 0 100 10))

(define LOI (list I1 I4))
(define LOI-1 (list I1.1 I4.1))


#;
(define (fn-for-invader invader)
  (... (invader-x invader) (invader-y invader) (invader-dx invader)))



(define-struct missile (x y))
;; Missile is (make-missile Number Number)
;; interp. the missile's location is x y in screen coordinates

(define M1 (make-missile 150 300))                       ;not hit U1
(define M1.1 (make-missile 150 (- 300 MISSILE-SPEED)))
(define M2 (make-missile (invader-x I1) (+ (invader-y I1) 10)))  ;exactly hit U1
(define M3 (make-missile (invader-x I1) (+ (invader-y I1)  5)))  ;> hit U1
(define M4 (make-missile 200 10))
(define M4.1 (make-missile 200 0))
(define M5 (make-missile 100 0))
(define M5.1 (make-missile 100 -10))
(define M6 (make-missile 200 8))
(define M6.1 (make-missile 200 -2))


#;
(define (fn-for-missile m)
  (... (missile-x m) (missile-y m)))



(define G0 (make-game empty empty T0))
(define G1 (make-game empty empty T1))
(define G2 (make-game (list I1) (list M1) T1))
(define G3 (make-game (list I1 I2) (list M1 M2) T1))
(define G4 (make-game (list I1 I2 I3) (list M1 M2) T1))



;; Functions:

;; Game -> Image
;; start the world with (main G0)
;; no tests for the main function

(define (main s)
  (big-bang s                         ; Game
            (on-tick   tock-game)     ; Game -> Game
            (to-draw   render)        ; Game -> Image
            (stop-when stop?)         ; Game -> WorldState Boolean
            (on-key    handle-key)))  ; Game KeyEvent -> Game

;; Game -> Game
;; produce the next s
#;
(check-expect (tock-game G2) (make-game (list I1.1) (list M1.1) T1))
 
(define (tock-game s)
  (make-game (bomb-loinvader (tock-loinvader (game-invaders s)) (tock-lomissile (game-missiles s)))   ; (listof Invader) (listof Missile) -> (listof Invader)
             (bomb-lomissile (tock-loinvader (game-invaders s)) (tock-lomissile (game-missiles s)))   ; (listof Invader) (listof Missile) -> (listof Missile)
             (tock-tank (game-t s))))                                                                 ; Tank                              -> Tank


;; (listof Invader) -> (listof Invader)
;; produce the next loi
#;
(check-expect (tock-loinvader LOI)
              (if (< (random INVADE-RATE) 50)
                  (cons (make-invader (random WIDTH) 0 10) LOI-1)
                  LOI-1))

(define (tock-loinvader loi)
  (just-spawn-loinvader (just-tock-loinvader loi)))


;; (listof Invader) -> (listof Invader)
;; only tock the loi
(check-expect (just-tock-loinvader empty) empty)
(check-expect (just-tock-loinvader (list I1 I4)) (list I1.1 I4.1))

(define (just-tock-loinvader loi)
  (cond [(empty? loi) empty]
        [else
         (cons (tock-invader (first loi))
               (just-tock-loinvader (rest loi)))]))


;; Invader -> Invader
;; produce the next i; modify the speed depending on the dx and if the invader bounce the wall it will turn around
(check-expect (tock-invader I1) I1.1)
(check-expect (tock-invader I4) I4.1)
(check-expect (tock-invader I5) I5.1)
(check-expect (tock-invader I6) I6.1)
(check-expect (tock-invader I7) I7.1)
(check-expect (tock-invader I8) I8.1)


(define (tock-invader i)
  (if (> (invader-dx i) 0)
      (if (> (+ (invader-x i) INVADER-X-SPEED) WIDTH)
          (make-invader (invader-x i)
                        (invader-y i)
                        (- (invader-dx i)))
          (make-invader (+ (invader-x i) INVADER-X-SPEED)
                        (+ (invader-y i) INVADER-Y-SPEED)
                        (invader-dx i)))
      (if (< (- (invader-x i) INVADER-X-SPEED) 0)
          (make-invader (invader-x i)
                        (invader-y i)
                        (- (invader-dx i)))
          (make-invader (- (invader-x i) INVADER-X-SPEED)
                        (+ (invader-y i) INVADER-Y-SPEED)
                        (invader-dx i)))))


;; (listof Invader) -> (listof Invader)
;; spawn a new invader to the loi if the condition is satisfied randomly
#;
(check-expect (just-spawn-loinvader LOI)
              (if (< (random INVADE-RATE) 50)
                  (cons (make-invader (random WIDTH) 0 10) LOI)
                  LOI))

(define (just-spawn-loinvader loi)
  (if (< (random INVADE-RATE) 50)
      (cons (make-invader (random WIDTH) 0 10) loi)
      loi))


;; (listof Missile) -> (listof Missile)
;; produce the next lom
(check-expect (tock-lomissile (list M1 M4 M5 M6)) (list M1.1 M4.1))

(define (tock-lomissile lom)
  (filter-lomissile (just-tock-lomissile lom)))


;; (listof Missile) -> (listof Missile)
;; only tock the lom
(check-expect (just-tock-lomissile (list M1 M4)) (list M1.1 M4.1))

(define (just-tock-lomissile lom)
  (cond [(empty? lom) empty]
        [else
         (cons (tock-missile (first lom))
               (just-tock-lomissile (rest lom)))]))

;; Missile -> Missile
;; produce the next m
(check-expect (tock-missile M1) M1.1)
(check-expect (tock-missile M4) M4.1)
(check-expect (tock-missile M5) M5.1)
(check-expect (tock-missile M6) M6.1)

(define (tock-missile m)
  (make-missile (missile-x m) (- (missile-y m) MISSILE-SPEED)))


;; (listof Missile) -> (listof Missile)
;; filter the lom if its member is out of screen
(check-expect (filter-lomissile (list M1.1 M4.1 M5.1 M6.1)) (list M1.1 M4.1))

(define (filter-lomissile lom)
  (cond [(empty? lom) empty]
        [else
         (if (dropit? (first lom))
             (filter-lomissile (rest lom))
             (cons (first lom)
                   (filter-lomissile (rest lom))))]))


;; Missile -> Boolean
;; produce true if m is out of screen
(check-expect (dropit? M5.1) true)
(check-expect (dropit? M5) false)

(define (dropit? m)
  (< (missile-y m) 0))


;; (listof Invader) (listof Missile) -> (listof Invader)
;; bomb all the invaders in the loi that are in the range of lom
(check-expect (bomb-loinvader empty (list M1 M2 M3)) empty)
(check-expect (bomb-loinvader (list I4 I5 I1) (list M1 M2 M3)) (list I4 I5))
(check-expect (bomb-loinvader (list I4 I5 I6 I7) (list M1 M2 M3)) (list I4 I5 I6 I7))

(define (bomb-loinvader loi lom)
  (cond [(empty? loi) empty]
        [else
         (if (inrange1? (first loi) lom)
             (bomb-loinvader (rest loi) lom)
             (cons (first loi)
                   (bomb-loinvader (rest loi) lom)))]))


;; Invader (listof Missile) -> Boolean
;; produce true if i is in the range of lom
(check-expect (inrange1? I1 (list M1 M2 M3)) true)
(check-expect (inrange1? I4 (list M1 M2 M3)) false)

(define (inrange1? i lom)
  (cond [(empty? lom) false]
        [else
         (if (and
              (>= (+ (invader-x i) HIT-RANGE)
                  (missile-x (first lom))
                  (- (invader-x i) HIT-RANGE))
              (>= (+ (invader-y i) HIT-RANGE)
                  (missile-y (first lom))
                  (- (invader-y i) HIT-RANGE)))
             true
             (inrange1? i (rest lom)))]))


;; (listof Invader) (listof Missile) -> (listof Missile)
;; bomb all the missiles in the lom that are in the range of loi
(check-expect (bomb-lomissile (list I4 I5 I6 I1) empty) empty)
(check-expect (bomb-lomissile (list I4 I5 I6 I1) (list M4 M5 M6 M2)) (list M4 M5 M6))
(check-expect (bomb-lomissile (list I4 I5 I6 I1) (list M4 M5 M6)) (list M4 M5 M6))

(define (bomb-lomissile loi lom)
  (cond [(empty? lom) empty]
        [else
         (if (inrange2? (first lom) loi)
             (bomb-lomissile loi (rest lom))
             (cons (first lom)
                   (bomb-lomissile loi (rest lom))))]))

;; Missile (listof Invader) -> Boolean
;; produce true if m is in the range of loi
(check-expect (inrange2? M2 (list I4 I5 I6 I1)) true)
(check-expect (inrange2? M2 (list I4 I5 I6)) false)

(define (inrange2? m loi)
  (cond [(empty? loi) false]
        [else
         (if (and
              (>= (+ (invader-x (first loi)) HIT-RANGE)
                  (missile-x m)
                  (- (invader-x (first loi)) HIT-RANGE))
              (>= (+ (invader-y (first loi)) HIT-RANGE)
                  (missile-y m)
                  (- (invader-y (first loi)) HIT-RANGE)))
             true
             (inrange2? m (rest loi)))]))


;; Tank -> Tank
;; produce the next tank; if the tank reachs the wall it will stop where it was otherwise it will move by the direction of (tank-dir t)
(check-expect (tock-tank T1) T1.1)
(check-expect (tock-tank T2) T2.1)
(check-expect (tock-tank T3) T3.1)
(check-expect (tock-tank T4) T4)

(define (tock-tank t)
  (cond [(or
          (= (tank-dir t) 0)
          (and (> (tank-dir t) 0) (> (+ (tank-x t) TANK-SPEED) WIDTH))
          (and (< (tank-dir t) 0) (< (- (tank-x t) TANK-SPEED) 0)))
         t]
        [(> (tank-dir t) 0) (make-tank (+ (tank-x t) TANK-SPEED) (tank-dir t))]
        [(< (tank-dir t) 0) (make-tank (- (tank-x t) TANK-SPEED) (tank-dir t))]))
        

;; Game -> Image
;; render the game on the BACKGROUND 
(check-expect (render G3)
              (place-image TANK 50 (- HEIGHT TANK-HEIGHT/2)
                           (place-image MISSILE 150 300
                                        (place-image MISSILE 150 110
                                                     (place-image INVADER 150 100
                                                                  (place-image INVADER 150 HEIGHT BACKGROUND))))))              
(define (render s)
  (render-tank (game-t s)
               (render-lomissile (game-missiles s)
                                 (render-loinvader (game-invaders s)))))


;; (listof Invader) -> Image
;; render the invaders on the BACKGROUND
(check-expect (render-loinvader empty) BACKGROUND)
(check-expect (render-loinvader (list I1 I2))
              (place-image INVADER 150 100
                           (place-image INVADER 150 HEIGHT BACKGROUND)))
                                
(define (render-loinvader loi)
  (cond [(empty? loi) BACKGROUND]
        [else
         (place-loi (first loi)
                    (render-loinvader (rest loi)))]))


;; Invader Image -> Image
;; render the i on the img to create a new Image
(check-expect (place-loi I1 BACKGROUND)
              (place-image INVADER 150 100 BACKGROUND))

(define (place-loi i img)
  (place-image INVADER (invader-x i) (invader-y i) img))


;; (listof Missile) Image -> Image
;; render the missiles on the img
(check-expect (render-lomissile empty BACKGROUND) BACKGROUND)
(check-expect (render-lomissile (list M1 M2) BACKGROUND)
              (place-image MISSILE 150 300
                           (place-image MISSILE 150 110 BACKGROUND)))

(define (render-lomissile lom img)
  (cond [(empty? lom) img]
        [else
         (place-lom (first lom)
                    (render-lomissile (rest lom) img))]))


;; Missile Image -> Image
;; render the m on the img to create a new Image
(check-expect (place-lom M1 BACKGROUND)
              (place-image MISSILE 150 300 BACKGROUND))

(define (place-lom m img)
  (place-image MISSILE (missile-x m) (missile-y m) img))


;; Tank Image -> Image
;; render the t on the img to create a new Image
(check-expect (render-tank T1 BACKGROUND)
              (place-image TANK 50 (- HEIGHT TANK-HEIGHT/2) BACKGROUND))

(define (render-tank t img)
  (place-image TANK (tank-x t) (- HEIGHT TANK-HEIGHT/2) img))


;; Game KeyEvent -> Game
;; control the tank direction by left and right, press space to shoot missiles
(check-expect (handle-key G0 "left") (make-game empty empty (make-tank (/ WIDTH 2) -1)))
(check-expect (handle-key G0 "right") (make-game empty empty (make-tank (/ WIDTH 2) 1)))
(check-expect (handle-key G0 " ") (make-game empty (list (make-missile 150 HEIGHT)) (make-tank (/ WIDTH 2) 0)))

(define (handle-key s ke)
  (cond [(key=? ke "left") (make-game (game-invaders s)
                                      (game-missiles s)
                                      (make-tank (tank-x (game-t s)) -1))]
        [(key=? ke "right") (make-game (game-invaders s)
                                       (game-missiles s)
                                       (make-tank (tank-x (game-t s)) 1))]
        [(key=? ke " ") (make-game (game-invaders s)
                                   (new-missiles (game-t s) (game-missiles s))
                                   (game-t s))]
        [else s]))

;; Tank (listof Missile) -> (listof Missile)
;; generate a new missile where the tank is
(check-expect (new-missiles (make-tank (/ WIDTH 2) 0) empty)
              (list (make-missile (/ WIDTH 2) HEIGHT)))

(define (new-missiles t lom)
  (cons (make-missile (tank-x t) HEIGHT) lom))


;; Game -> WorldState Boolean
;; stop the world if any invader cross the HEIGHT
(check-expect (stop? G3) false)
(check-expect (stop? G4) true)

(define (stop? s)
  (stop?? (game-invaders s)))

;; (listof Invader) -> Boolean
;; produce true if any invader cross the HEIGHT
(check-expect (stop?? (list I1 I2 I3)) true)
(check-expect (stop?? (list I1 I2)) false)

(define (stop?? loi)
  (cond [(empty? loi) false]
        [else
         (if (> (invader-y (first loi)) HEIGHT)
             true
             (stop?? (rest loi)))]))
                                   

